import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;

// Main application class
public class InventoryFinanceManager {
    private List<InventoryItem> inventory;
    private List<FinancialTransaction> transactions;
    private double totalBalance;
    private double totalProfit;

    public InventoryFinanceManager() {
        inventory = new ArrayList<>();
        transactions = new ArrayList<>();
        totalBalance = 0.0;
        totalProfit = 0.0;
    }

    // Inventory Management
    public void addItem(String name, int quantity, double unitPrice) {
        double cost = quantity * unitPrice;
        if (cost > totalBalance) {
            System.out.println("Not enough balance to add item: " + name);
            return;
        }
        totalBalance -= cost;
        inventory.add(new InventoryItem(name, quantity, unitPrice));
        System.out.println("Item added to inventory: " + name);
        recordTransaction("Purchased " + quantity + " of " + name, -cost);
    }

    public void updateItemQuantity(String name, int quantity) {
        for (InventoryItem item : inventory) {
            if (item.getDescription().equalsIgnoreCase(name)) {
                item.setQuantity(quantity);
                System.out.println("Updated quantity for item: " + name);
                return;
            }
        }
        System.out.println("Item not found: " + name);
    }

    public void sellItem(String name, int quantity) {
        for (InventoryItem item : inventory) {
            if (item.getDescription().equalsIgnoreCase(name)) {
                if (quantity > item.getQuantity()) {
                    System.out.println("Not enough stock to sell: " + name);
                    return;
                }
                double revenue = quantity * item.getSellingPrice();
                double cost = quantity * item.getUnitPrice();
                double profit = revenue - cost;
                totalBalance += revenue;
                totalProfit += profit;
                item.addProfit(profit);
                item.setQuantity(item.getQuantity() - quantity);
                System.out.println("Sold " + quantity + " of " + name + " at Rp" + item.getSellingPrice() + " each");
                recordTransaction("Sold " + quantity + " of " + name, revenue);
                return;
            }
        }
        System.out.println("Item not found: " + name);
    }

    public void displayInventory() {
        System.out.println("\nInventory List:");
        for (InventoryItem item : inventory) {
            System.out.println(item);
        }
    }

    // Financial Management
    public void recordTransaction(String description, double amount) {
        transactions.add(new FinancialTransaction(description, amount));
    }

    public void displayTransactions() {
        System.out.println("\nFinancial Transactions:");
        for (FinancialTransaction transaction : transactions) {
            System.out.println(transaction);
        }
    }

    public void displayBalance() {
        System.out.println("\nTotal Balance: Rp" + totalBalance);
    }

    public void displayProfit() {
        System.out.println("\nTotal Profit: Rp" + totalProfit);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        InventoryFinanceManager manager = new InventoryFinanceManager();

        System.out.print("Enter initial capital (modal) in Rp: ");
        manager.totalBalance = scanner.nextDouble();
        scanner.nextLine(); // Consume newline

        while (true) {
            System.out.println("\nMenu:");
            System.out.println("1. Add Inventory Item");
            System.out.println("2. Update Item Quantity");
            System.out.println("3. Sell Inventory Item");
            System.out.println("4. Display Inventory");
            System.out.println("5. Record Financial Transaction");
            System.out.println("6. Display Transactions");
            System.out.println("7. Display Balance");
            System.out.println("8. Display Profit");
            System.out.println("9. Exit");
            System.out.print("Choose an option: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter item name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter quantity: ");
                    int quantity = scanner.nextInt();
                    System.out.print("Enter unit price: Rp");
                    double price = scanner.nextDouble();
                    manager.addItem(name, quantity, price);
                    break;
                case 2:
                    System.out.print("Enter item name to update: ");
                    String itemName = scanner.nextLine();
                    System.out.print("Enter new quantity: ");
                    int newQuantity = scanner.nextInt();
                    manager.updateItemQuantity(itemName, newQuantity);
                    break;
                case 3:
                    System.out.print("Enter item name to sell: ");
                    String sellName = scanner.nextLine();
                    System.out.print("Enter quantity to sell: ");
                    int sellQuantity = scanner.nextInt();
                    manager.sellItem(sellName, sellQuantity);
                    break;
                case 4:
                    manager.displayInventory();
                    break;
                case 5:
                    System.out.print("Enter transaction description: ");
                    String description = scanner.nextLine();
                    System.out.print("Enter transaction amount (negative for expenses): Rp");
                    double amount = scanner.nextDouble();
                    manager.recordTransaction(description, amount);
                    manager.totalBalance += amount;
                    break;
                case 6:
                    manager.displayTransactions();
                    break;
                case 7:
                    manager.displayBalance();
                    break;
                case 8:
                    manager.displayProfit();
                    break;
                case 9:
                    System.out.println("Exiting program.");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
